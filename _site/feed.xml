<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-30T03:13:55+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">개발 놀이터</title><author><name>진화하는 개발자</name></author><entry><title type="html">2022.04.30 TIL</title><link href="http://localhost:4000/til/TIL/" rel="alternate" type="text/html" title="2022.04.30 TIL" /><published>2022-04-30T00:00:00+09:00</published><updated>2022-04-30T00:00:00+09:00</updated><id>http://localhost:4000/til/TIL</id><content type="html" xml:base="http://localhost:4000/til/TIL/"><![CDATA[<p>정말 오랜만이다!! 바쁜 대학 생활중에 돌아왔다. ㅎ 이제 대학 생활도 어느정도 틀이 잡힌 것 같으니 꾸준히 개발 블로그를 다시 운영하려 한다.
어제, 오늘 한 것은 다음과 같다.</p>
<ul>
  <li>실용주의 프로그래머 정독 및 내용 실천 방안</li>
  <li>새 노트북에 WLS2, git, VSCode 설치</li>
</ul>

<p>앞으로는 이런 것들을 해야 하겠다. 우선 순위는 향후 정하는 걸로.</p>
<ul>
  <li>Linux 운영체제에 대한 이해</li>
  <li>컴퓨터과학을 전공과목으로써 이해</li>
  <li>기존에 하던 것 (AI, C++ 등)</li>
</ul>]]></content><author><name>진화하는 개발자</name></author><category term="TIL" /><category term="TIL" /><category term="blog" /><summary type="html"><![CDATA[오늘 내가 한 것]]></summary></entry><entry><title type="html">WSL2 and Linux</title><link href="http://localhost:4000/links/WSL2/" rel="alternate" type="text/html" title="WSL2 and Linux" /><published>2022-04-30T00:00:00+09:00</published><updated>2022-04-30T00:00:00+09:00</updated><id>http://localhost:4000/links/WSL2</id><content type="html" xml:base="http://localhost:4000/links/WSL2/"><![CDATA[<h2 id="1-wsl2-링크">1. WSL2 링크</h2>
<p>WSL2는 Windows 환경에서 Linux를 가상머신 없이 사용할 수 있도록 한다. (나의 얄팍한 지식…) 사용해보니 정말 가상머신과는 비교가 안 되는 성능을 가지고 있다. 설명 대신 WSL2와 관련하여 내가 유용하게 찾은 링크들을 걸어놓겠다.</p>
<ul>
  <li><a href="https://docs.microsoft.com/en-us/windows/wsl/install">WSL2 설치: Microsoft 공식문서</a></li>
  <li><a href="https://www.lesstif.com/software-architect/wsl-2-windows-subsystem-for-linux-2-89555812.html">WSL2에 대한 lesstif님의 글</a></li>
</ul>

<h2 id="2-wsl-관련-linux-명령어-정리">2. WSL 관련 (Linux) 명령어 정리</h2>
<p>아무래도 Linux 환경에 익숙하지 않다 보니까 WSL2를 사용할 때 약간 헤맨다. Linux 환경에 대해 WSL2 사용에 필요한 만큼만 적어두자.</p>

<h3 id="linux-file-system">Linux File System</h3>
<p>Linux는 <code class="language-plaintext highlighter-rouge">/</code> (root directory)에서 파일구조가 시작된다. <code class="language-plaintext highlighter-rouge">/home</code> 또는 <code class="language-plaintext highlighter-rouge">~</code> 안에 User들의 폴더가 있고, 나의 경우 그 안에 <code class="language-plaintext highlighter-rouge">Projects</code> 폴더를 만들어 거기에 프로젝트를 저장하고 있다.</p>

<p>권한</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">sudo</code>: 특정 작업은 특별한 권한이 필요하다. (Windows에서 관리자 권한 비슷한 느낌) 임의의 <code class="language-plaintext highlighter-rouge">command</code>를 <code class="language-plaintext highlighter-rouge">sudo</code> 권한으로 실행시키려면 <code class="language-plaintext highlighter-rouge">sudo command</code>하면 된다.</li>
</ul>

<p>파일 내비게이션</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cd</code>: change directory; 팁: <code class="language-plaintext highlighter-rouge">Tab</code>을 누르면 이름이 자동완성된다.</li>
  <li><code class="language-plaintext highlighter-rouge">pwd</code>: print working directory</li>
  <li><code class="language-plaintext highlighter-rouge">ls</code>: list; 폴더의 내용물 출력</li>
</ul>

<p>생성 및 삭제</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">mkdir</code>: make directory</li>
  <li><code class="language-plaintext highlighter-rouge">rmdir</code>: remove directory (빈 경우만 가능)</li>
  <li><code class="language-plaintext highlighter-rouge">rm</code>: remove</li>
  <li><code class="language-plaintext highlighter-rouge">rm -r</code>: <code class="language-plaintext highlighter-rouge">-r</code> 옵션은 recursive로, 비어있지 않은 폴더의 내용물을 삭제해준다.</li>
</ul>

<p>파일 열기</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">nano</code>: 일단 지금은 이걸로 간단한 편집 작업을 수행할 예정이다. <code class="language-plaintext highlighter-rouge">nano filename</code>처럼 수행하면 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">code .</code>: 복잡한 작업은 VSCode로 진행할 예정이다. 뒤의 <code class="language-plaintext highlighter-rouge">.</code>은 현재 directory에서 열라는 이야기다.</li>
</ul>

<h3 id="wsl-시작-및-종료">WSL 시작 및 종료</h3>
<ul>
  <li>(Powershell에서 들어가자마자) <code class="language-plaintext highlighter-rouge">wsl</code>: wsl을 기본 배포판으로 시작한다.</li>
  <li>(<code class="language-plaintext highlighter-rouge">wsl</code>을 친 다음에) <code class="language-plaintext highlighter-rouge">cd ~</code>: 처음에 들어가면 Working Directory가 <code class="language-plaintext highlighter-rouge">/mnt/(윈도우 경로)</code>의 꼴로 되어있다. 일반적으로 WSL에서 굳이 Window 파일에 접속하려 하지는 않으므로 home으로 가준다.</li>
  <li>(WSL 실행중에) <code class="language-plaintext highlighter-rouge">exit</code>: 말 그대로 Linux Kernel에서 나간다. 평범한 Powershell로 돌아온다.</li>
  <li>(나간 평범한 Powershell에서) <code class="language-plaintext highlighter-rouge">wsl --shutdown</code>: 말 그대로 돌아가던 WSL을 종료한다.</li>
</ul>]]></content><author><name>진화하는 개발자</name></author><category term="links" /><category term="wsl" /><category term="wsl2" /></entry><entry><title type="html">2021.07.16 TIL</title><link href="http://localhost:4000/til/TIL/" rel="alternate" type="text/html" title="2021.07.16 TIL" /><published>2021-07-16T00:00:00+09:00</published><updated>2021-07-16T00:00:00+09:00</updated><id>http://localhost:4000/til/TIL</id><content type="html" xml:base="http://localhost:4000/til/TIL/"><![CDATA[<p>오랜만에 돌아왔다. 그 이유는 최근에 한 권으로 읽는 컴퓨터 구조와 프로그래밍이라는 책을 읽었기 때문이다. 오늘은 그 책을 다 읽고 독서록을 쓰고 관련해서 배울 점 등을 정리해보았다.
<a href="/books/the-secret-life-of-programs/">독서록 링크</a></p>

<p>그 외에도 C 프로그래밍 공부를 시작했다.
<a href="/c/c-start/">오늘 공부한 C 링크</a></p>]]></content><author><name>진화하는 개발자</name></author><category term="TIL" /><category term="TIL" /><category term="blog" /><summary type="html"><![CDATA[오늘 내가 한 것]]></summary></entry><entry><title type="html">C 프로그래밍 시작</title><link href="http://localhost:4000/c/c-start/" rel="alternate" type="text/html" title="C 프로그래밍 시작" /><published>2021-07-16T00:00:00+09:00</published><updated>2021-07-16T00:00:00+09:00</updated><id>http://localhost:4000/c/c-start</id><content type="html" xml:base="http://localhost:4000/c/c-start/"><![CDATA[<p><a href="https://www.tutorialspoint.com/cprogramming/index.htm">Tutorialspoint</a>의 강의로 C를 배우려고 한다.
오늘은 Hello World 출력하고 기본적인 개념을 배웠다.</p>

<h2 id="개념-정리">개념 정리</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">;</code>: statement terminator</li>
  <li><code class="language-plaintext highlighter-rouge">/* */</code>: comments</li>
  <li>identifiers: name of variable/function etc.</li>
  <li>identifier naming rule: python과 동일. 처음에는 문자 + _, 그 다음에는 문자 + _ + 숫자</li>
  <li>keywords</li>
</ul>]]></content><author><name>진화하는 개발자</name></author><category term="C" /><category term="C" /><summary type="html"><![CDATA[시작이 반이다... 그런건가]]></summary></entry><entry><title type="html">한 권으로 읽는 컴퓨터 구조와 프로그래밍</title><link href="http://localhost:4000/books/the-secret-life-of-programs/" rel="alternate" type="text/html" title="한 권으로 읽는 컴퓨터 구조와 프로그래밍" /><published>2021-07-16T00:00:00+09:00</published><updated>2021-07-16T00:00:00+09:00</updated><id>http://localhost:4000/books/the-secret-life-of-programs</id><content type="html" xml:base="http://localhost:4000/books/the-secret-life-of-programs/"><![CDATA[<h1 id="한-권으로-읽는-컴퓨터-구조와-프로그래밍">한 권으로 읽는 컴퓨터 구조와 프로그래밍</h1>
<h1 id="the-secret-life-of-programs-understand-computers--craft-better-code">The Secret Life of Programs: Understand Computers – Craft Better Code</h1>

<p>저자: 조너선 스타인하트 (Jonathan E. Steinhart)</p>

<h2 id="읽게-된-계기">읽게 된 계기</h2>
<p>학교 세특에 쓸 개발 관련 책을 찾아보다가 백과사전식으로 컴퓨터 과학 전반을 훑는 책이 있어서 한번 읽어보았다. 이 책은 시스템 프로그래밍 (비트, 전자 회로, 메모리 등)부터 고급 주제 (병렬성, 보안, 인공지능), 그리고 팁과 경험담을 담고 있다.</p>

<h2 id="누구를-위한-책인가">누구를 위한 책인가?</h2>
<blockquote>
  <p>이 책은 프로그래밍을 배우고 있지만 깊이 부족으로 인해 불만족스러워하는 사람을 위한 책이다. 그리고 이미 프로그래밍을 배웠지만 프로그래밍과 컴퓨터에 대해 더 잘 알고 싶어하는 사람을 위한 책이기도 하다.</p>
</blockquote>

<h2 id="느낀점">느낀점</h2>
<p>균형이 잘 잡힌 책인것 같다. 이 책의 특장점은 컴퓨터 과학의 중심 개념들을 배경지식이 거의 전무한 사람도 읽을 수 있도록 정리해 두었다는 것이다. 그래서 읽으면서 새로운 개념들을 많이 접하게 되었고, 컴퓨터 과학의 landscape를 전반적으로 이해한 것 같다. 그러나 여기서 나오는 단점은 개념들을 완전히 정확하고 세밀하게 설명하고 있지는 않다는 것이다. (이는 저자도 인정하는 바이다) 그래서 이해의 수준이 관련된 글을 읽으면 더욱 빠르게 이해할 수는 있지만 그렇다고 내가 설명하지는 못하는 정도인 개념들이 상당히 많았다. 그래도 뭐 엄청나게 많은 개념들을 다뤘기 때문에 이 정도면 좋은 책인 것 같다.</p>

<h2 id="앞으로-더-배워보고-싶은-주제">앞으로 더 배워보고 싶은 주제</h2>
<ul>
  <li>C 프로그래밍</li>
  <li>운영체제</li>
</ul>]]></content><author><name>진화하는 개발자</name></author><category term="books" /><category term="books" /><category term="system programing" /><summary type="html"><![CDATA[The Secret Life of Programs: Understand Computers -- Craft Better Code]]></summary></entry><entry><title type="html">2021.07.10 TIL</title><link href="http://localhost:4000/til/TIL/" rel="alternate" type="text/html" title="2021.07.10 TIL" /><published>2021-07-10T00:00:00+09:00</published><updated>2021-07-10T00:00:00+09:00</updated><id>http://localhost:4000/til/TIL</id><content type="html" xml:base="http://localhost:4000/til/TIL/"><![CDATA[<p>좀 쓰기 그렇지만 오늘은 아무것도 안했다.
이 포스트는 그냥 친구가 준 자동 블로그 업로더를 시험해보기 위한 것이다. 구현해줘서 고맙다</p>]]></content><author><name>진화하는 개발자</name></author><category term="TIL" /><category term="TIL" /><category term="blog" /><summary type="html"><![CDATA[오늘 내가 한 것]]></summary></entry><entry><title type="html">2021.07.06 TIL</title><link href="http://localhost:4000/til/TIL/" rel="alternate" type="text/html" title="2021.07.06 TIL" /><published>2021-07-06T00:00:00+09:00</published><updated>2021-07-06T00:00:00+09:00</updated><id>http://localhost:4000/til/TIL</id><content type="html" xml:base="http://localhost:4000/til/TIL/"><![CDATA[<p>오늘은 블로그 정리를 주로 했다.</p>
<ul>
  <li>블로그에 트리 구조를 구현하면서 파이썬에서 클래스를 이용하여 트리 구조를 구현하는 방법을 익히게 되었다.</li>
  <li>Jekyll 에서 Page를 등록하고 메뉴를 만드는 방법을 알게 되었다.</li>
</ul>]]></content><author><name>진화하는 개발자</name></author><category term="TIL" /><category term="TIL" /><category term="blog" /><summary type="html"><![CDATA[오늘 내가 한 것]]></summary></entry><entry><title type="html">개발 관련 할 일</title><link href="http://localhost:4000/general/ideas/" rel="alternate" type="text/html" title="개발 관련 할 일" /><published>2021-07-05T00:00:00+09:00</published><updated>2021-06-15T00:00:00+09:00</updated><id>http://localhost:4000/general/ideas</id><content type="html" xml:base="http://localhost:4000/general/ideas/"><![CDATA[<p>여기는 개발 관련해서 해야 할 일들을 가볍게 정리하는 페이지이다.</p>
<ul>
  <li>개발 관련 대회/공모전 알아보기</li>
</ul>]]></content><author><name>진화하는 개발자</name></author><category term="general" /><category term="todo" /></entry><entry><title type="html">VSCode 유용한 작업 및 단축키 정리</title><link href="http://localhost:4000/vscode/vscodeshortcuts/" rel="alternate" type="text/html" title="VSCode 유용한 작업 및 단축키 정리" /><published>2021-07-05T00:00:00+09:00</published><updated>2021-06-15T00:00:00+09:00</updated><id>http://localhost:4000/vscode/vscodeshortcuts</id><content type="html" xml:base="http://localhost:4000/vscode/vscodeshortcuts/"><![CDATA[<p>시험 끝나고 다시 돌아와서 기쁘다. 오늘은 가볍게 VSCode 단축키를 정리해볼 예정이다.</p>

<h2 id="1-peek">1. Peek</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">F12</code>: 해당 클래스/함수가 있는 파일로 이동</li>
  <li><code class="language-plaintext highlighter-rouge">F12</code> + <code class="language-plaintext highlighter-rouge">Alt</code>: 파일을 이동하지 않고 peek</li>
</ul>

<h2 id="2-renaming">2. Renaming</h2>
<p>코드를 짜다 보면 클래스나 함수 이름을 바꿔야 할 때가 있다. 이때 함수가 어디에 사용되었는지 일일히 보면 당연히 비효율적이다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">f</code>: Find &amp; Replace 기능을 이용하는 방법. 가장 초보적이다.</li>
  <li><code class="language-plaintext highlighter-rouge">F2</code>: 함수 클릭 후 <code class="language-plaintext highlighter-rouge">F2</code>를 누르면 프로젝트 내 모든 이름이 바뀐다.</li>
</ul>

<h2 id="3-debugging">3. Debugging</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">F9</code>: Breakpoint 추가</li>
  <li><code class="language-plaintext highlighter-rouge">F5</code>: 디버깅 시작</li>
  <li><code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">F5</code>: 디버깅 종료</li>
  <li><code class="language-plaintext highlighter-rouge">F5</code>: 디버깅 계속 진행 (다음 Breakpoint까지)</li>
  <li><code class="language-plaintext highlighter-rouge">F10</code>: 건너뛰기</li>
  <li><code class="language-plaintext highlighter-rouge">F11</code>: 함수 안으로 Step in</li>
  <li><code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">F11</code>: 함수 밖으로 Step Out</li>
</ul>

<h2 id="4-그외-조작이동">4. 그외 조작/이동</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Alt</code> + <code class="language-plaintext highlighter-rouge">커서</code>: 멀티커서</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">l</code>: 코드 하이라이트</li>
  <li><code class="language-plaintext highlighter-rouge">Alt</code> + <code class="language-plaintext highlighter-rouge">방향키</code>: 하이라이트 한 부분을 아래로 내림</li>
  <li><code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">Alt</code> + <code class="language-plaintext highlighter-rouge">방향키</code>: 복사</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">p</code>: 파일 검색 및 그 파일로 이동</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">`</code>: 터미널 창 오픈</li>
</ul>

<h2 id="5-출처">5. 출처</h2>
<p><a href="https://www.youtube.com/watch?v=mh-0twurNRE&amp;ab_channel=%EC%BD%94%EB%94%A9%EC%95%A0%ED%94%8C">출처: https://www.youtube.com/watch?v=mh-0twurNRE&amp;ab_channel=%EC%BD%94%EB%94%A9%EC%95%A0%ED%94%8C</a></p>]]></content><author><name>진화하는 개발자</name></author><category term="vscode" /><category term="vscode" /><category term="shortcuts" /><category term="단축키" /></entry><entry><title type="html">파이썬: 데코레이터</title><link href="http://localhost:4000/python/python-decorator/" rel="alternate" type="text/html" title="파이썬: 데코레이터" /><published>2021-06-15T00:00:00+09:00</published><updated>2021-06-15T00:00:00+09:00</updated><id>http://localhost:4000/python/python-decorator</id><content type="html" xml:base="http://localhost:4000/python/python-decorator/"><![CDATA[<h2 id="1-데코레이터의-소개">1. 데코레이터의 소개</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bad_func_1</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"중복되는 기능"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"func_1만의 기능"</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">bad_func_2</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"중복되는 기능"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"func_2만의 기능"</span><span class="p">)</span>
</code></pre></div></div>

<p>다음과 같은 코드는 무엇이 문제일까? 가장 큰 문제는 코드가 불필요하게 반복되고 있다는 것이다. 이런 식으로 코드를 짜면 재사용도 잘 안되고 func_1만 고치고 func_2는 고치는 것을 잊을 수도 있다.</p>

<p>그러면 다음과 같이 코드를 짜면 좋을 것이다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_feature</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"중복된 기능"</span><span class="p">)</span>
        <span class="n">func</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">wrapper</span>

<span class="k">def</span> <span class="nf">func_1</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"func_1만의 기능"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">func_2</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"func_2만의 기능"</span><span class="p">)</span>

<span class="n">add_feature</span><span class="p">(</span><span class="n">func_1</span><span class="p">)()</span>
<span class="n">add_feature</span><span class="p">(</span><span class="n">func_2</span><span class="p">)()</span>
</code></pre></div></div>
<p>재사용이 잘 된 코드다. 여기서 파이썬은 <code class="language-plaintext highlighter-rouge">add_feature(func_1)</code> 대신에 데코레이터 구문을 쓸 수 있도록 하고 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_feature</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"중복된 기능"</span><span class="p">)</span>
        <span class="n">func</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">wrapper</span>

<span class="o">@</span><span class="n">add_feature</span>
<span class="k">def</span> <span class="nf">func_1</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"func_1만의 기능"</span><span class="p">)</span>

<span class="o">@</span><span class="n">add_feature</span>
<span class="k">def</span> <span class="nf">func_2</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"func_2만의 기능"</span><span class="p">)</span>

<span class="n">func_1</span><span class="p">()</span>
<span class="n">func_2</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="2-데코레이터의-일반적인-구조">2. 데코레이터의 일반적인 구조</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"some feature of the decorator"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">wrapper</span>

<span class="o">@</span><span class="n">decorator</span>
<span class="k">def</span> <span class="nf">example_1</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span>

<span class="k">print</span><span class="p">(</span><span class="n">example_1</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</code></pre></div></div>
<ul>
  <li>이것이 입력값과 출력값을 가진 함수에 데코레이터를 적용하는 방법이다.</li>
  <li><code class="language-plaintext highlighter-rouge">@decorator</code>는 기본적으로 <code class="language-plaintext highlighter-rouge">decorator(example_1)</code>과 같다는 것을 잊지 말자.</li>
</ul>

<p>한편, 복수의 데코레이터를 적용할 수도 있다. 이때 실행순서는 위의 데코레이터부터 실행된다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decorator1</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"decorator 1"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">wrapper</span>

<span class="k">def</span> <span class="nf">decorator2</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"decorator 2"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">wrapper</span>

<span class="o">@</span><span class="n">decorator1</span>
<span class="o">@</span><span class="n">decorator2</span>
<span class="k">def</span> <span class="nf">example_1</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span>

<span class="k">print</span><span class="p">(</span><span class="n">example_1</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="c1"># decorator 1
# decorator 2
# 9
</span></code></pre></div></div>

<h2 id="3-functoolswraps">3. functools.wraps</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"some feature of the decorator"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">wrapper</span>

<span class="o">@</span><span class="n">decorator</span>
<span class="k">def</span> <span class="nf">example_1</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span>

<span class="k">def</span> <span class="nf">example_2</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">example_2</span>

<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">__name__</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">example_1</span><span class="p">.</span><span class="n">__name__</span><span class="p">)</span>
</code></pre></div></div>
<p>다음 예제를 실행해보자. 파이썬의 함수는 <code class="language-plaintext highlighter-rouge">__name__</code> 변수를 통해 정의될 당시의 이름을 저장하고 있다. 그래서 <code class="language-plaintext highlighter-rouge">f.__name__</code>을 실행하면 <code class="language-plaintext highlighter-rouge">example_2</code>가 나온다. 그런데 <code class="language-plaintext highlighter-rouge">example_1.__name__</code>의 값은 데코레이터에서 사용한 <code class="language-plaintext highlighter-rouge">wrapper</code>이다!</p>

<p><strong>이처럼 데코레이터를 적용하면 함수 메타데이터가 바뀐다는 문제점이 있다.</strong> 이 문제점을 해결하기 위한 방법이 바로 <code class="language-plaintext highlighter-rouge">functools.wraps</code>를 이용하는 것이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>

<span class="k">def</span> <span class="nf">decorater</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    
    <span class="o">@</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"some feature of the decorator"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">wrapper</span>

<span class="o">@</span><span class="n">decorater</span>
<span class="k">def</span> <span class="nf">example_1</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span>

<span class="k">def</span> <span class="nf">example_2</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">example_2</span>

<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">__name__</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">example_1</span><span class="p">.</span><span class="n">__name__</span><span class="p">)</span>
</code></pre></div></div>

<p>바뀐 점은 <code class="language-plaintext highlighter-rouge">@wraps(func)</code>를 적용했다는 점 뿐이다. 그런데 example_1의 메타데이터가 사라지지 않고 제대로 남아있음을 알 수 있다.</p>

<h2 id="4-클래스-형태의-데코레이터">4. 클래스 형태의 데코레이터</h2>
<p>그렇게 자주 사용되지는 않지만 클래스 형태의 데코레이터도 있다. 클래스 형태의 데코레이터를 씌우면 나오는 객체는 클래스의 인스턴스이다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DecoratorClass</span><span class="p">():</span>
    <span class="n">original_name</span> <span class="o">=</span> <span class="s">''</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">original_name</span> <span class="o">+=</span> <span class="n">func</span><span class="p">.</span><span class="n">__name__</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">func</span> <span class="o">=</span> <span class="n">func</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"some feature of the decorater"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

<span class="o">@</span><span class="n">DecoratorClass</span>
<span class="k">def</span> <span class="nf">example_1</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span>

<span class="k">print</span><span class="p">(</span><span class="n">example_1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">example_1</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">example_1</span><span class="p">.</span><span class="n">original_name</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="5-데코레이터의-사용-예시">5. 데코레이터의 사용 예시</h2>
<ul>
  <li>유저가 로그인 상태가 아니면 로그인 페이지로 리다이렉트</li>
  <li>로그 남기기</li>
  <li>테스팅</li>
</ul>

<h2 id="6-참고자료">6. 참고자료</h2>
<p><a href="http://schoolofweb.net/blog/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-decorator/">School Of Web</a>       <br />
<a href="https://bluese05.tistory.com/30">Tistory 블로그</a>      <br />
<a href="https://dojang.io/mod/page/view.php?id=2427">코딩 도장</a></p>]]></content><author><name>진화하는 개발자</name></author><category term="python" /><category term="TIL" /><category term="fastai" /></entry></feed>